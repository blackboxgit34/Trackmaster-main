@{
    ViewBag.Title = "StatusReport";
}
<link href="~/Content/css/jquery.powertip.css" rel="stylesheet" />
<script src="~/Content/js/jquery.powertip.min.js"></script>


<!--For Live-->
@*<script src="https://maps.googleapis.com/maps/api/js?libraries=places&sensor=false"></script>*@
<!-- For Local-->
@*<script src="https://maps.googleapis.com/maps/api/js?libraries=places&sensor=false&client=gme-nucleusmicrosystems"></script>*@
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCITh4LYqVNyaJ_YDiYgRxv29dhPJnU-5o&libraries=places" language="javascript"    type="text/javascript"></script>

<script>
    var totalLoc;
    google.maps.event.addDomListener(window, 'load', initialize1);

    function initialize1() {
        var inputStartLocation = document.getElementById('txtStartLocation');
        //input = $("#txtEndLocation").val();
        var options = {
            componentRestrictions: { country: 'IN' }
        };
        var autocomplete = new google.maps.places.Autocomplete(inputStartLocation, options);
        autocomplete.addListener('place_changed', function () {
            var place = autocomplete.getPlace();
            // place variable will have all the information you are looking for.
            console.log(place.geometry['location'].lat());
            startLocLat = place.geometry['location'].lat();
            startLocLong = place.geometry['location'].lng();

            console.log(place.geometry['location'].lng());

        });
    }
    google.maps.event.addDomListener(window, 'load', initialize2);
    function initialize2() {
        var inputEndLocation = document.getElementById('txtEndLocation');
        //input = $("#txtEndLocation").val();
        var options = {
            componentRestrictions: { country: 'IN' }
        };
        var autocomplete1 = new google.maps.places.Autocomplete(inputEndLocation, options);
        autocomplete1.addListener('place_changed', function () {
            var place1 = autocomplete1.getPlace();
            // place variable will have all the information you are looking for.
            console.log(place1.geometry['location'].lat());
            endLocationLat = place1.geometry['location'].lat();
            endLocationLong = place1.geometry['location'].lng();

            console.log(place1.geometry['location'].lng());
            var response = distance(startLocLat, startLocLong, endLocationLat, endLocationLong);


            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
                origins: [document.getElementById('txtStartLocation').value],
                destinations: [document.getElementById('txtEndLocation').value],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {
                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    var duration = response.rows[0].elements[0].duration.text;
                    var arrayOfStrings = distance.split(' ');

                    var totDistance = Number(distance.replace(/[^0-9\.]+/g, ""));
                   // alert(duration);
                    //alert(totDistance);
                    //var dvDistance = document.getElementById("dvDistance");
                    //dvDistance.innerHTML = "";
                    //dvDistance.innerHTML += "Distance: " + distance + "<br />";
                    //dvDistance.innerHTML += "Duration:" + duration;

                    $("#txtGoogleDistance").val(parseFloat(totDistance).toFixed(1));

                    // $("#txtGoogleDistance").val(response.toFixed(1));

                } else {
                    alert("Unable to find the distance via road.");
                }
            });

            // $("#txtGoogleDistance").val(response.toFixed(1));
        });
    }

    function distance(lat1, lon1, lat2, lon2) {
        var R = 6371; // Radius of the earth in km
        var dLat = (lat2 - lat1) * Math.PI / 180;  // deg2rad below
        var dLon = (lon2 - lon1) * Math.PI / 180;
        var a =
           0.5 - Math.cos(dLat) / 2 +
           Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
           (1 - Math.cos(dLon)) / 2;

        var result = R * 2 * Math.asin(Math.sqrt(a));

        return result;
    }
</script>

<style>
    .pac-container {
        background-color: #FFF;
        z-index: 20;
        position: fixed;
        display: inline-block;
        float: left;
    }

    .modal {
        z-index: 20;
    }

    .modal-backdrop {
        z-index: 10;
    }
    /*​ .ui-datepicker {
           z-index: 551 !important;
    }*/
</style>



<script>
    var $beginDate;
    var $endDate;
    var startLocLat;
    var startLocLong;
    var endLocationLat;
    var endLocationLong;
    var param1;
    $(function () {

        //$('.datePIKER').datetimepicker({
        //    beforeShow: function () {
        //        setTimeout(function () {
        //            $('.ui-datepicker').css('z-index', 99999999999999);
        //        }, 0);
        //    }
        //});


        var start = moment().subtract(0, 'days').startOf('day');
        var end = moment();

        function cb(start, end) {
            $('#timeRange span').html(start.format('MMM D YYYY, h:mm:ss a') + ' - ' + end.format('MMM D YYYY, h:mm:ss a'));
            $beginDate = start.format('MMM D YYYY h:mm:ss a');
            $endDate = end.format('MMM D YYYY h:mm:ss a');
        }

        $('#timeRange').daterangepicker({
            startDate: start,
            endDate: end,
            opens: "right",
            timePicker: true,
            ranges: {
                'Today': [moment().subtract(0, 'days').startOf('day'), moment()],
                'Yesterday': [moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day')],
                'Last 7 Days': [moment().subtract(6, 'days').startOf('day'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days').startOf('day'), moment()],
                'This Month': [moment().startOf('month').startOf('day'), moment()],
                'Last Month': [moment().subtract(1, 'month').startOf('month').startOf('day'), moment().subtract(1, 'month').endOf('month')]
            },
        }, cb);

        cb(start, end);
        $('#txtDepartureDate').datepicker({
            beforeShow: function () {
                setTimeout(function () {
                    $('.ui-datepicker').css('z-index', 99999999999999);
                }, 0);
            }
        });
    });
</script>






<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<link href="//cdn.rawgit.com/Eonasdan/bootstrap-datetimepicker/e8bddc60e73c1ec2475f827be36e1957af72e2ea/build/css/bootstrap-datetimepicker.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.9.0/moment-with-locales.js"></script>
<script src="//cdn.rawgit.com/Eonasdan/bootstrap-datetimepicker/e8bddc60e73c1ec2475f827be36e1957af72e2ea/src/js/bootstrap-datetimepicker.js"></script>

<link href="~/Content/css/tabsWithAnimation.css" rel="stylesheet" />
<script src="@Url.Content("~/Content/DataTable/jquery.dataTables.min.js")"></script>
<script src="~/Content/js/APIURL.js"></script>
<div id="Fade" class="w3-container city w3-animate-zoom">
    <div class="row-fluid">

        <div class="row-fluid">
            <!--Heading part-->
@*            <div class="widget-body" style="border: 0">
                <div class="row-fluid">
                    <div class="widget span12">
                        <div class="widget-header">
                            <i class="fa fa-truck"></i>
                            <h5>Update Settings</h5>
                            <div class="pull-right">
                                <button class="pull-right btn btn-green btn-small" style="margin-top: 5.5%; margin-right: 10%;" data-toggle="modal" data-target="#myModal" href="#" id="popUP">Update Settings</button>

                            </div>

                        </div>
                    </div>

                </div>
            </div>*@

            <!-- End of Heading part-->


            @* <div class="w3-padding">Use any of the w3-animate-classes to fade, zoom or slide in tab content.</div>*@

            <div class="row-fluid" style=" margin-right: 10%; margin-bottom: 12px;">
                <div class="widget-body" style="border: 0">
                    <div class="row-fluid">
                        <div class="widget span12">
                            <div class="widget-body  " style="background: #fff; overflow-x: auto">
                                <div id="DivVehcleCounter">
                                    <div class="box-content padded">
                                        <table id="dt_basic_Master" class="table table-bordered" cellspacing="0" width="100%">
                                            <thead>
                                                <tr>
                                                    <th class="hidden">BBID</th>
                                                    <th>Vehicle Name</th>
                                                    <th>Driver Name</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">BBID</th>
                                                    <th class="hidden">CurrentDateTime</th>

                                                    <th>Status</th>
                                                   @* <th>Action</th>*@
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            @*</div>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $("#vehicleslist").select2({
            //  placeholder: "select Vehicles.",
        });

        //for all vehicles
        $("#popUP").click(function () {
            $("#divVehicleslist").removeClass("hidden");
            ajaxForPopUp();

        });

        function ajaxForPopUp() {

            var baseurl = '@System.Configuration.ConfigurationManager.AppSettings["apibaseurl"]';
        var url = baseurl + 'api/adminapi/getvehicles?custid=1619';
        $.getJSON(url, function (data) {
            $('#vehicleslist').append($('<option></option>').val(0).html("All Vehicles"));
            $.each(data, function (i, item) {
                $('#vehicleslist').append($('<option></option>').val(item.Value).html(item.Text));
            });
        });
    }


        var url = apiBase.apiurl + "AdminAPI/UpdateAdminSettings";

        table = $('#dt_basic_Master').DataTable({
            //"oLanguage": {
            //    "sProcessing": "<img src='../Content/Trackmaster_files/loader.gif'/>"
            //},
            language: {
                searchPlaceholder: "Search Vehicle Name",
                sSearch: ""
            },
            "processing": true,
            "serverSide": true,
            destroy: true,
            retrieve: true,
            "sAjaxSource": url,
            "iDisplayLength": 5,
            "aLengthMenu": [[5, 10, 20, 25, 50], [5, 10, 20, 25, 50]],
            "fnServerParams": function (param) {
                param.push({ "name": "custId", "value": $custid });
            },

            "columns": [
                    {
                        "class": "hidden",
                        "render": function (data, type, full, meta) {

                            return '<span class="hidden">' + full.BBID + '</span>';
                        }
                    },

                    {
                        "width": "15%",
                        "data": "VehicleName"
                    },
                    {
                        "width": "15%",
                        "data": "DriverName"
                    },

                        {
                            "class": "hidden",
                            "data": "StartLocation"
                        },
                             {
                                 "class": "hidden",
                                 "data": "Distance"
                             },
                        {
                            "class": "hidden",
                            "data": "EndLocation"
                        },
                        {
                            "class": "hidden",
                            "data": "SLat"
                        },
                        {
                            "class": "hidden",
                            "data": "SLongi"
                        },
                      {
                          "class": "hidden",
                          "data": "ELat"
                      },
                       {
                           "class": "hidden",
                           "data": "ELongi"
                       }, {
                           "class": "hidden",
                           "data": "StartDateTime"
                       }, {
                           "class": "hidden",
                           "data": "EndDateTime"
                       }, {
                           "class": "hidden",
                           "data": "CurrentLocation"
                       },
                        {
                            "class": "hidden",
                            "data": "CurrentLat"
                        }, {
                            "class": "hidden",
                            "data": "CurrentLongi"
                        },
                            {
                            "class": "hidden",
                            "data": "CurrentDateTime"
                        },
                         {
                             "data": null,
                             "render": function (data, type, full, meta) {

                                 var currentCricle;
                                 var startToCurDist;
                                 var remainingDist;
                                 var remainingProgBarWidth;
                                 var completedProgBarWidth;

                                 //var curloc;
                                 var leftDistance = distance(full.CurrentLat, full.CurrentLongi, full.ELat, full.ELongi).toFixed();
                                 if (!isNaN(leftDistance)) {

                                     var totalDist = parseFloat(full.Distance).toFixed();
                                     var leftDistInPercent = (leftDistance * 100) / totalDist;

                                     if (leftDistInPercent >= 99) {
                                         currentCricle = 0;
                                         leftDistInPercent = 100;
                                     }
                                     else {
                                         completedProgBarWidth = (100 - leftDistInPercent).toFixed();
                                         currentCricle = parseInt(completedProgBarWidth);
                                     }
                                 }
                                 else {
                                     currentCricle = 0;
                                     leftDistInPercent = 100;
                                 }

                                 if (full.Distance == "N/A") {
                                     return '<span>No Tracking for this vehicle.</span>';
                                 }
                                 return '<div class="col-md-12"><div class="progress" style="height:5px !important;  margin-top:1%;"><div class="one grey-color  mouseOnStartPos"></div><div class="two success-color mouseOnCurrentPos" style="left:' + parseInt(currentCricle).toFixed() + '%;"></div><div class="three mouseOnEndPos red-color "></div><div class="progress-bar progress-bar-customSuccess " style="width: ' + parseInt(completedProgBarWidth).toFixed() + '%"></div><div class="progress-bar progress-bar-warning" style="width: ' + leftDistInPercent.toFixed() + '%"></div></div></div>';

                             }
                         },

                    //{
                    //    "width": "15%",
                    //    "data": null,
                    //    "render": function (data, type, full, meta) {
                    //        return '<span><button class="btn btn-green btn-small" type="button" data-toggle="modal" data-target="#myModal" id="' + full.BBID + '" onClick="PopUpModal(this.id);"><i class="fa fa-pencil"></i></button></span>';
                    //    }
                    //},
            ],
            "rowCallback": function (row, data, index) {
                if (data.objRefTemperature == 0) {
                    var target = $(row).find(".details-control");
                    var index = (target).index();
                    $(row).find('td:eq(' + index + ')').removeClass('details-control')
                }
            }
        });
   



    $('#dt_basic_Master').on('draw.dt', function () {
      
        var mouseOnStartPos = $('.mouseOnStartPos');
        var mouseOnCurrentPos = $('.mouseOnCurrentPos');
        var mouseOnEndPos = $('.mouseOnEndPos');
       
        mouseOnStartPos.powerTip({
            placement: 's',
            mouseOnToPopup: true,
            smartPlacement: true,
            //  manual: true
        });
        
        // hook custom onclick function
        $('.mouseOnStartPos').on('click', function () {
            alert("Tolltip");
            // hide any open tooltips
            // this is optional, but recommended in case we optimize away the sanity
            // checks in the API at some point.
            $.powerTip.hide();
            // show the tooltip for the element that received the click event
            $.powerTip.show(this);
        });

        // hook custom mouse events
        $('.mouseOnStartPos').on({
            powerTipPreRender: function () {
              var  bbid = $(this).parents('tr:first').find('td:eq(0)').text()
              var startLocation = $(this).parents('tr:first').find('td:eq(3)').text()
              var startDateTime = $(this).parents('tr:first').find('td:eq(10)').text()
              var totalDist = $(this).parents('tr:first').find('td:eq(4)').text()

              $(this).data('powertip', '<p>Start Location: <b>' + startLocation + '</b></p>' +
                             '<p>Start Date Time: <b> ' + startDateTime + '</b></p>'+
                             '<p>Total Distance: <b> ' + totalDist + '</b></p>');
               },
            mouseenter: function (event) {
                param1 = $(this).parents('tr:first').find('td:eq(0)').text()
                
                $.powerTip.show(this, event);
            },
            mouseleave: function () {
                $.powerTip.hide(this);
            }
        });

        //for current location
        mouseOnCurrentPos.powerTip({
            placement: 's',
            mouseOnToPopup: true,
            smartPlacement: true,
        });

        $('.mouseOnCurrentPos').on('click', function () {
            alert(param1);
            $.powerTip.hide();
            // show the tooltip for the element that received the click event
            $.powerTip.show(this);
        });
        var leftDistance;
        // hook custom mouse events
        $('.mouseOnCurrentPos').on({
            powerTipPreRender: function () {
                
                var bbid = $(this).parents('tr:first').find('td:eq(0)').text();
                var currentLocation = $(this).parents('tr:first').find('td:eq(12)').text();
                var currentDateTime = $(this).parents('tr:first').find('td:eq(15)').text();
                var startDateTime = $(this).parents('tr:first').find('td:eq(10)').text();
                var endDateTime = $(this).parents('tr:first').find('td:eq(11)').text();
                var currentLat = $(this).parents('tr:first').find('td:eq(13)').text();
                var currentLongi = $(this).parents('tr:first').find('td:eq(14)').text();
                var endLat = $(this).parents('tr:first').find('td:eq(8)').text();
                var endLongi = $(this).parents('tr:first').find('td:eq(9)').text();
                var endLocation = $(this).parents('tr:first').find('td:eq(5)').text()
                var currentLocation; var delayedDistance; var delayedDay;

                // Distance
                var totalDistance = $(this).parents('tr:first').find('td:eq(4)').text();
               // var leftDistance = distance(currentLat,currentLongi,endLat,endLongi)
                var left = setTimeout(GetDistance(currentLat, currentLongi, endLocation),60);
                //alert(leftDistance);
               

                var popUpDiv = $(this);
                setTimeout(function () {


                    var completedDistance = (parseFloat(totalDistance) - parseFloat(leftDistance)).toFixed() ;

                    //day difference
                    var oneday = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
                    var currentDate = new Date(currentDateTime);
                    var startDate = new Date(startDateTime);
                    var endDate = new Date(endDateTime);
                    var totalDays = Math.round(Math.abs((startDate.getTime() - endDate.getTime()) / (oneday)))
                    var startToCurrDays = Math.round(Math.abs((startDate.getTime() - currentDate.getTime()) / (oneday)))
                    var perDayDistance = parseFloat(totalDistance).toFixed() / totalDays;

                    //for calculating distance should be travlled
                    var distanceShouldTravelled = perDayDistance * (startToCurrDays - 1);

                    if (distanceShouldTravelled > completedDistance) {
                        delayedDistance = distanceShouldTravelled - completedDistance;
                        delayedDay = (delayedDistance / perDayDistance).toFixed();
                    }

                    popUpDiv.data('powertip', '<p>Current Location: <b>' + currentLocation + '</b></p>' +
                               '<p>Current Date Time: <b> ' + currentDateTime + '</b></p>'+
                               '<p>Total Distance: <b> ' + totalDistance + '</b></p>'+
                               '<p>Travelled Distance: <b> ' + completedDistance + '</b></p>'+
                               '<p>Remaining Distance: <b> ' + leftDistance + '</b></p>' +
                               '<p>Delayed Distance: <b> ' + delayedDistance + '</b></p>'+
                                '<p>Delayed Time: <b> ' + delayedDay + ' days</b></p>'

                               );
                }, 100);

               // alert("test");
                //$(this).data('powertip', '<p>Current Location: <b>' + currentLocation + '</b></p>' +
                //               '<p>Current Date Time: <b> ' + currentDateTime + '</b></p>'+
                //               '<p>Total Distance: <b> ' + totalDistance + '</b></p>'+
                //               '<p>Travelled Distance: <b> ' + completedDistance + '</b></p>'+
                //               '<p>Remaining Distance: <b> ' + leftDistance + '</b></p>' +
                //               '<p>Current Date Time: <b> ' + completedDistance + '</b></p>'

                //               );
                
            },
            mouseenter: function (event) {
                param1 = $(this).parents('tr:first').find('td:eq(0)').text()
                $.powerTip.show(this, event);
            },
            mouseleave: function () {
                $.powerTip.hide(this);
            }
        });

        //for end location


        function GetDistance(lat1, long1, endLocation) {
            var distancesdsf;
            var currentLocation;
            var latlng = new google.maps.LatLng(lat1, long1);
            var geocoder = geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        currentLocation = results[1].formatted_address;

                       
                        var service = new google.maps.DistanceMatrixService();
                        var dfd = $.Deferred();
                        service.getDistanceMatrix({
                            origins: [currentLocation],
                            destinations: [endLocation],
                            travelMode: google.maps.TravelMode.DRIVING,
                            unitSystem: google.maps.UnitSystem.METRIC,
                            avoidHighways: false,
                            avoidTolls: false

                        }, function (response, status) {
                            if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {

                                // dfd.resolve(response);
                               // alert("tot");
                                var distance = response.rows[0].elements[0].distance.text;
                                var duration = response.rows[0].elements[0].duration.text;


                                var totDistance = Number(distance.replace(/[^0-9\.]+/g, ""));
                                leftDistance = totDistance;
                                // var dvDistance = document.getElementById("dvDistance");
                                //dvDistance.innerHTML = "";
                                //dvDistance.innerHTML += "Distance: " + distance + "<br />";
                                //dvDistance.innerHTML += "Duration:" + duration;
                               // alert("tot" + totDistance);
                                parseFloat(totDistance).toFixed();
                                return distancesdsf;
                                // $("#txtGoogleDistance").val(response.toFixed(1));

                            } else {
                                dfd.reject(status);

                            }
                        });
                       // alert(currentLocation);
                       // alert(endLocation);
                       // alert("Location: " + results[1].formatted_address);
                    }
                }
            });

          
           
           // alert(distancesdsf);
           // return distancesdsf;
        }

     










        mouseOnEndPos.powerTip({
            placement: 's',
            mouseOnToPopup: true,
            smartPlacement: true,
        });

        $('.mouseOnEndPos').on('click', function () {
            $.powerTip.hide();
            $.powerTip.show(this);
        });

        // hook custom mouse events
        $('.mouseOnEndPos').on({
            powerTipPreRender: function () {
                var bbid = $(this).parents('tr:first').find('td:eq(0)').text()
                var endLocation = $(this).parents('tr:first').find('td:eq(5)').text()
                var endDateTime = $(this).parents('tr:first').find('td:eq(11)').text()

                $(this).data('powertip', '<p>End Location: <b>' + endLocation + '</b></p>' +
                               '<p>End Date Time: <b> ' + endDateTime + '</b></p>');
              
            },
            mouseenter: function (event) {
                $.powerTip.show(this, event);
            },
            mouseleave: function () {
                $.powerTip.hide(this);
            }
        });
    });

    //for specific vehicle
    function PopUpModal(id) {
        //for hiding vehicle list 
        $("#divVehicleslist").addClass("hidden");
        $("#divVehicleName").removeClass("hidden");

        var baseurl = '@System.Configuration.ConfigurationManager.AppSettings["apibaseurl"]';
        var url = baseurl + 'api/adminapi/GetVehcileDetail?bbid=' + id;
        $.getJSON(url, function (data) {
            $("#bbid").val(id);
            $("#TimeSlot1").val(data.TimeSlot1);
            $("#TimeSlot2").val(data.TimeSlot2);
            $("#TimeSlot3").val(data.TimeSlot3);
            $("#TimeSlot4").val(data.TimeSlot4);
            $("#OverSpeedLimit").val(data.OverSpeedLimit);
            $("#maxConDriTime").val(data.MaxContinueDriTime);
            $("#avgSpeedRange").val(data.AverageSpeedRange);
            document.getElementById("vehicleNameP").innerHTML = data.VehicleName;
        })
    };

    function submitUpdateSettings() {
        var bbid = $("#bbid").val();
        var bbidList = $("#vehicleslist").val().toString();
        var startLocation = $("#txtStartLocation").val();
        var endLocation = $("#txtEndLocation").val();

        var sLat = startLocLat;
        var sLongi = startLocLong;
        var eLat = endLocationLat;
        var eLongi = endLocationLong;

        var startDateTime = $beginDate;
        var endDateTime = $endDate;
        var distanceKm;
        if ($('#chkDistance').prop('checked')) {
            distanceKm = $("#txtGoogleDistance").val();
        }
        else {
            distanceKm = $("#txtManualDistance").val();
        }
        if (!bbid && !bbidList) {
            $("#valvehicleslist").removeClass("hidden");
            return false;
        }
        if (!startLocation || !endLocation || !startDateTime || !endDateTime) {
            $("#valStartLocation").removeClass("hidden");
            $("#valEndLocation").removeClass("hidden");
            $("#valavgSpeedRange").removeClass("hidden");
            return false;
        }
        else {
            $("#valStartLocation").addClass("hidden");
            $("#valEndLocation").addClass("hidden");
            $("#valmaxConDriTime").addClass("hidden");
            $("#valvehicleslist").addClass("hidden");
        }
        $.blockUI({ message: '<h1><img src="../../Content/Trackmaster_files/loader.gif" /> </h1><br><h3>Just a moment...</h3>' });
        $('#myModal').modal('toggle');
        var baseurl = '@System.Configuration.ConfigurationManager.AppSettings["apibaseurl"]';
        var url = baseurl + "api/adminapi/StatusReportDataUpdation";
        $.ajax({
            url: url,
            dataType: "json",
            type: "GET",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            data: { bbid: bbid, SDateTimeForStatus: startDateTime, EDateTimeForStatus: endDateTime, SLocation: startLocation, ELocation: endLocation, SLat: sLat, Slongi: sLongi, ELat: eLat, Elongi: eLongi, bbidList: bbidList, custId: custId, distance: distanceKm },
            // async: false,
            success: function (data) {
                $.unblockUI();
                toastr.success('successfully Done!');
                window.location.reload(true);
            },
            error: function (err) {
                $.unblockUI();
                toastr.warning('something went wrong!');
            }

        });

        return false;
    }

    $('body').on('hidden.bs.modal', '.modal', function () {
        document.location.reload();
    });

    //for distance mode 
    $(function () {
        $('#chkDistance').change(function () {
            if ($(this).prop('checked')) {
                $("#txtManualDistance").addClass("hidden");
                $("#txtGoogleDistance").removeClass("hidden");
                distance = $("#txtGoogleDistance").val();
            }
            else {
                $("#txtGoogleDistance").addClass("hidden");
                $("#txtManualDistance").removeClass("hidden");
                distance = $("#txtManualDistance").val();
            }
        })
    })
    // $('#textbox1').val($(this).is(':checked'));
    });
</script>


<!-- Modal -->
<div class="modal  fade" id="myModal" role="dialog" style="background: transparent; overflow-y: hidden; margin-left: -50%; width: 100%;">
    <div class="modal-dialog modal-lg" style="width: 90%">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Update Settings</h4>
            </div>
            <div class="modal-body">
                <div>
                    <div class="box-content padded">
                        <form data-toggle="validator" role="form">
                            <div class="col-md-12 hidden" id="divVehicleName">
                                <div class="form-group">
                                    @*<label for="inputName" id="vehicleName" class="control-label"></label>*@
                                    <h4>Vehicle Name:  <b id="vehicleNameP"></b></h4>
                                </div>
                            </div>
                            <div class="col-md-12" id="divVehicleslist">
                                <div class="form-group ">
                                    <label for="inputName" class="control-label">Select Vehicles</label>
                                    <span style="color: indianred" class="hidden" id="valvehicleslist"><i class=" fa fa-exclamation-triangle"></i>Please Select Vehicles.</span>

                                    <select class="form-control" id="vehicleslist" multiple></select>

                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label for="inputName" class="control-label">Start Location</label>
                                        <span style="color: indianred" class="hidden" id="valStartLocation"><i class="fa fa-exclamation-triangle"></i>Insert Start Location.</span>

                                        <input type="text" class="form-control" id="txtStartLocation" placeholder="Start Location">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label for="inputName" class="control-label">End Location</label>
                                        <span style="color: indianred" class="hidden" id="valEndLocation"><i class=" fa fa-exclamation-triangle"></i>Insert End Location.</span>

                                        <input type="text" class="form-control" id="txtEndLocation" placeholder="End Location">
                                    </div>
                                </div>


                            </div>
                            <div class="col-md-12">
                                <div class="col-md-8" style="width: 50%;">
                                    <label for="inputName" class="control-label DatePicker">Departure and Reaching Date</label>

                                    <span style="color: indianred" class="hidden" id="valTimeRange"><i class=" fa fa-exclamation-triangle"></i>Select Date range.</span>

                                    <div id="timeRange" class="pull-right" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">
                                        <i class=" fa fa-calendar"></i>
                                        &nbsp;<span></span><b class="caret"></b>
                                    </div>
                                </div>
                                <div class="col-md-4" style="background-color: transparent !important;">
                                    <div class="form-group ">
                                        <label for="inputName" class="control-label">Distance Mode</label>
                                        <input id="chkDistance" type="checkbox" checked data-toggle="toggle" data-width="100" data-on="Default" data-off="Manual" id="chkDistance" data-size="small">
                                    </div>
                                </div>
                                <div class="col-md-2" style="background-color: transparent !important;">

                                    <div class="form-group ">
                                        <label for="inputName" class="control-label">Total Distance</label>
                                        <div class="input-group">
                                            <div class="input-group date" data-provide="datepicker">
                                                <input id="txtGoogleDistance" type="number" style="text-align: center; font-weight: bold;" class="form-control" disabled>
                                                <input id="txtManualDistance" type="number" style="text-align: center; font-weight: bold;" class="form-control hidden">
                                                <div class="input-group-addon">
                                                    <span class="">KM</span>
                                                </div>
                                            </div>
                                            <input type="hidden" id="custId" name="custId" />
                                            <input type="hidden" id="bbid" name="bbid" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="submitUpdateSettings();" class="btn btn-green">Submit</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>



<style>
.one, .two, .three{
  position: absolute;
    margin-top: -7px;
    z-index: 1;
    height: 20px;
    width: 20px;
    border-radius: 25px;
	
}
.one{
	left:0%;
}
/*.two{
	left:58%;
}*/
.three{
	left:92%;
}
.primary-color{
	background-color:#4989bd;
}
.success-color{
	background-color:#8e9d13;
}
.danger-color{
	background-color:#d9534f;
}
.warning-color{
	background-color:#faa732;
}
.info-color{
	background-color:#5bc0de;
}
    .grey-color {
        background-color:grey;
    }
    .red-color {
        background-color:indianred;
    }
.no-color{
	background-color:inherit;
}

.progress-bar-customSuccess {
     background-image: -webkit-gradient(linear, left 0%, left 100%, from(#8e9d13), to(#ec971f));
      background-image: -webkit-linear-gradient(top, #f0ad4e, 0%, #ec971f, 100%);
       background-image: -moz-linear-gradient(top, #f0ad4e 0%, #ec971f 100%);
        background-image: linear-gradient(to bottom, #8e9d13 0%, #FFEC971F 100%); background-repeat: repeat-x; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#8e9d13', endColorstr='#FFEC971F', GradientType=0); } 
</style>